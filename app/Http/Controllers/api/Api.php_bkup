<?php

namespace App\Http\Controllers\api;

use App\Models\Usermodel;

use App\Models\Interestsmodel;
use App\Models\Friendrequestmodel;
use App\Models\Likemodel;
use App\Models\Newsfeedmodel;
use App\Models\Likeprofilemodel;
use App\Models\Profileview;


use App\Models\Countrymodel;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Sanctum\PersonalAccessToken;
use Mail;
use App\Mail\DemoMail;
use DB;

class Api extends Controller
{

    public function index(Type $var = null)
    {
       echo "hello";
    }

    public function createUser(Request $request)
    {
        try {
            //Validated
            $validateUser = Validator::make(
                $request->all(),
                [
                   'email' => 'required|email|unique:user_managements,email',
                    'password' => 'required'
                ]
            );

            if ($validateUser->fails()) {

                return response()->json([
                    'status' => false,
                    'error' => 'validation error',
                    'message' => $validateUser->errors()->first()
                ], 401);
            }

            $user = Usermodel::create([
                'firstname' => !empty($request->firstname)?$request->firstname:NULL,
                'lastname' => !empty($request->lastname)?$request->lastname:NULL,
				'email' => $request->email,
                'birthday' => !empty($request->birthday)?$request->birthday:NULL,
                'password' => Hash::make($request->password),
				'country' => !empty($request->country)?$request->country:NULL,
				'mobile' => !empty($request->mobile)?$request->mobile:NULL,
                'registration_type' => !empty($request->registration_type)?$request->registration_type:1
            ]);
            $token=$user->createToken("API TOKEN")->plainTextToken;
            Usermodel::where('email',$request->email)->update(['remember_token'=>$token]);
            return response()->json([
                'status' => true,
                'message' => 'Account Created Successfully',
                'token' => $token
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message'=>'Internal server error!',
                'error' => $th->getMessage()
            ], 500);
        }
    }
    public function loginuser(Request $request)
    {
        try {
            if($request->registration_type==1){
            $validuser = validator::make($request->all(), [
                'email' => 'required|email',
                'password' => 'required'
               
            ]);
      
            if ($validuser->fails()) {

                return response()->json(['status' => false, 'message' => 'validator error', 'errors' => $validuser->errors()], 401);
            }
            if (!Auth::attempt($request->only(['email', 'password']))) {
                return response()->json([
                    'status' => false,
                    'message' => 'Email & Password does not match with our record.',
                ], 401);
            }

            $user = Usermodel::where('email', $request->email)->first();
            $token=$user->createToken("API TOKEN")->plainTextToken;
            if(Usermodel::where('email', $request->email)->where('is_first_login', true)->count()>0){
                $is_first_login=false;
            Usermodel::where('email',$request->email)->update(['remember_token'=>$token,'fcm_token'=>$request->fcm_token]);
            }
            else{
                $is_first_login=true;
                Usermodel::where('email',$request->email)->update(['remember_token'=>$token,'fcm_token'=>$request->fcm_token,'is_first_login'=>true]);
            }
            return response()->json(['status' => true, 'is_first_login'=>$is_first_login,'message' => 'User Logged Successfully', 'token' =>$token]); 
           
        }
     
        else{
            if(Usermodel::where('user_id', $request->user_id)->count()>0){
            $user = Usermodel::where('user_id', $request->user_id)->first();
            $token=$user->createToken("API TOKEN")->plainTextToken;
            if(Usermodel::where('email', $request->email)->where('is_first_login', true)->count()>0){
                $is_first_login=false;
                Usermodel::where('email',$request->user_id)->update(['remember_token'=>$token,'fcm_token'=>$request->fcm_token]);
         
            }
            else{
                $is_first_login=true;
            Usermodel::where('email',$request->user_id)->update(['remember_token'=>$token,'fcm_token'=>$request->fcm_token,'is_first_login'=>true]);
             } 
             return response()->json(['status' => true, 'is_first_login'=>$is_first_login,'message' => 'User Logged Successfully', 'token' =>$token]); 
           
            }
            else{
                $user = Usermodel::create([
                    'firstname' => !empty($request->firstname)?$request->firstname:NULL,
                    'lastname' => !empty($request->lastname)?$request->lastname:NULL,
                    'email' => $request->email,
                    'birthday' => !empty($request->birthday)?$request->birthday:NULL,
                    'country' => !empty($request->country)?$request->country:NULL,
                    'mobile' => !empty($request->mobile)?$request->mobile:NULL,
                    'registration_type' => !empty($request->registration_type)?$request->registration_type:2,
                    'user_id'=>$request->user_id,
                    'premium' => !empty($request->premium)?$request->premium:0
                ]);
                $token=$user->createToken("API TOKEN")->plainTextToken;
                Usermodel::where('user_id',$request->user_id)->update(['remember_token'=>$token]);
                return response()->json([
                    'status' => true,
                    'message' => 'Account Created Successfully',
                    'token' => $token
                ], 200);
               // return response()->json(['status' => false, 'message' => 'Invalid User ID']);  
            }
        }
    }catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => $th->getMessage()], 500);
        }
    }










    
    public function forgetpassword(Request $request)
    {
       try{
        if(Usermodel::where('email', $request->email)->count()>0){
            $user = Usermodel::where('email', $request->email)->first();
        $to_name = $request->firstname;
        $to_email = $request->email;
        $otp=rand(1000,9999);
        $data = array('name'=>'', 'message' => 'Your OTP for forgot password is'.$otp);
       /* Mail::send('mail', $data, function($message) use ($to_name, $to_email) {
        $message->to($to_email, $to_name)
        ->subject('One time password for LIT');
        $message->from('test@stdev.in','LIT');
        }); */

      $mailData = [
            'title' => 'One time password for LIT',
            'body' => 'Your OTP to reset password is '.$otp
        ];
         
        Mail::to($to_email)->send(new DemoMail($mailData));		
        Usermodel::where('email', $request->email)->update(['otp'=>$otp,'otp_time'=>date('Y-m-d H:i:s')]);
        return response()->json(['status' => true, 'message' => 'OTP send','temp_token' => $user->remember_token]);
     
    }  
    else{
        return response()->json(['status' => false, 'message' => 'E-mail address not found'], 404);
    }  
}  catch (\Throwable $th) {
    return response()->json(['status' => false, 'message' => $th->getMessage()], 500);
}  
    }
    public function matchotp(Request $request)
    {
        try{
        if(Usermodel::where('remember_token', $request->temp_token)->where('otp',$request->otp)->count()>0){
            $user = Usermodel::where('email', $request->email)->first();
            return response()->json(['status' => true, 'message' => 'OTP validated'], 200); 
        }
        else{
            return response()->json(['status' => false, 'message' => 'Invalid OTP'], 200); 
        }
    }
    catch (\Throwable $th) {
        return response()->json(['status' => false, 'message' => $th->getMessage()], 500);
    } 
    }

    public function resetpassword(Request $request)
    {
        try{
        if(Usermodel::where('remember_token', $request->temp_token)->count()>0){
            Usermodel::where('remember_token', $request->temp_token)->update(['password'=>Hash::make($request->password)]);
            return response()->json(['status' => true, 'message' => 'Password successfully changed'], 200); 
        }
        else{
            return response()->json(['status' => false, 'message' => 'Invalid User'], 200); 
        }
    }
    catch (\Throwable $th) {
        return response()->json(['status' => false, 'message' => $th->getMessage()], 500);
    } 
    }



    public function getprofilebyid(Request $request)
    {
              $token = auth('sanctum')->user();

        if ( Usermodel::where('remember_token', $token->remember_token)->count() > 0) {
            $getprofile =  Usermodel::where('remember_token', $token->remember_token)->select('id as id', 'background_image as background_image','profile_picture as profile_picture', 'mobile as mobile','email as email', 'firstname as firstname', 'lastname as lastname','username as username', 'address as address', 'pincode as pincode', 'city as city', 'birthday as birthday', 'interest  as interest', 'country  as country', 'is_dob_disable  as dob_visible','bgc_verified as bgc_verified','story as story','premium as premium', 'fb_link  as fb_link', 'youtube_link  as youtube_link','instagram_link as instagram_link','tiktok_link as tiktok_link','password as password','registration_type as registration_type','school as school','status as status','remember_token as remember_token','email_verified_at as email_verified_at','create_user as create_user','update_user as update_user','is_first_login as is_first_login','created_at as created_at','updated_at as updated_at')->get();
       // return$getprofile[0];
	  $getid =  Usermodel::select('school  as school')->where('remember_token', $token->remember_token)->first();
// $getid =  Usermodel::select('school  as school')->first();
       // $getprofile[0]['matchprofile'] = Usermodel::select('id as Id', 'background_image as BackgroundImage','profile_picture as ProfilePicture', 'mobile as Mobile','email as Email', 'firstname as Firstname', 'lastname as Lastname','username as Username', 'address as Address', 'pincode as Pincode', 'city as City', 'birthday as Birthday', 'interest  as Interest', 'country  as Country', 'is_dob_disable  as DobVisible','bgc_verified as bgc_verified','story as Story','premium as premium', 'fb_link  as fb_link', 'youtube_link  as youtube_link','instagram_link as instagram_link','tiktok_link as tiktok_link','password as password','registration_type as registration_type','user_id as user_id','school as school','status as status','remember_token as remember_token','email_verified_at as email_verified_at','create_user as create_user','update_user as update_user','is_first_login as is_first_login','created_at as created_at','updated_at as updated_at')->where('school',$getid->school)->get();
 $matchingProfiles= Usermodel::select('id as id', 'background_image as background_image','profile_picture as profile_picture', 'mobile as mobile','email as email', 'firstname as firstname', 'lastname as lastname','username as username', 'address as address', 'pincode as pincode', 'city as city', 'birthday as birthday', 'interest  as interest', 'country  as country', 'is_dob_disable  as dob_visible','bgc_verified as bgc_verified','story as story','premium as premium', 'fb_link  as fb_link', 'youtube_link  as youtube_link','instagram_link as instagram_link','tiktok_link as tiktok_link','password as password','registration_type as registration_type','school as school','status as status','remember_token as remember_token','email_verified_at as email_verified_at','create_user as create_user','update_user as update_user','is_first_login as is_first_login','created_at as created_at','updated_at as updated_at')->get();
		$matchingProfiless=array();
		 $i = 0;
foreach($matchingProfiles as $matchingProfiles){ 
	$matchingProfiless[$i]=$matchingProfiles;
$matchingProfiless[$i]['interest']=array_map('intval',explode(',',substr($matchingProfiless[$i]['interest'],1,-1)));
$i++;
}
$getprofile[0]['matchprofile']=$matchingProfiless;
		$getprofile[0]['friend'] =Friendrequestmodel::where('friend_id',$getprofile[0]['id'])->where('friend_request_type',2)->count();
		$getprofile[0]['like'] =Likeprofilemodel::where('profile_id',$getprofile[0]['id'])->where('like_type',1)->count();
	$getprofile[0]['profile_viewed'] =Profileview::join('user_managements','user_managements.id','=','profile_view.user_id')->where('profile_view.profile_id',$getprofile[0]['id'])->get(['user_managements.id as id','user_managements.background_image as background_image','user_managements.profile_picture as profile_picture', 'user_managements.mobile as mobile','user_managements.email as email', 'user_managements.firstname as firstname', 'user_managements.lastname as lastname','user_managements.username as username']);

	//Profileview::where('profile_id',$getprofile[0]['id'])->count();
$sett=DB::table('settings')->first();
        if(empty($getprofile[0]['nav_bar_background']))
        {
            $getprofile[0]['nav_bar_background']='http://lt-admin.mynewsystem.net/images/settings/'.$sett->nav_bar_background;
        }


		if(empty($getprofile[0]['background_image']))
        {
            $getprofile[0]['background_image']='http://lt-admin.mynewsystem.net/images/settings/'.$sett->background_image;
        }

        if(empty($getprofile[0]['profile_picture']))
        {
            $getprofile[0]['profile_picture']='http://lt-admin.mynewsystem.net/images/settings/84428.jpg';
        }

$getprofile[0]['interest']=array_map('intval',explode(',',substr($getprofile[0]['interest'],1,-1)));
 $getprofile[0]['friend_list'] =Friendrequestmodel::join('user_managements','user_managements.id','=','friend_tbl.friend_id')->where('friend_tbl.friend_id',$getprofile[0]['id'])->get(['user_managements.id as id','user_managements.background_image as background_image','user_managements.profile_picture as profile_picture', 'user_managements.mobile as mobile','user_managements.email as email', 'user_managements.firstname as firstname', 'user_managements.lastname as lastname','user_managements.username as username']);


		   return  response()->json(['status' => true, 'data' =>$getprofile], 200);
        } else {
            return  response()->json(['token'=>$token,'status' => false, 'message' => 'No available data'], 404);
        }
    }


    public function getinterestlist()
    {


        if ( Interestsmodel::count() > 0) {
            $getinterest =  Interestsmodel::select('interest_id as interest_id', 'interest as interest')->get();
            return  response()->json(['status' => true, 'data' => $getinterest], 200);
        } else {
            return  response()->json(['status' => false, 'message' => 'No available interest data'], 200);
        }
    }


    public function getcountrylist()
    {


        if ( Countrymodel::count() > 0) {
            $getcountry =  Countrymodel::select('country_id  as country_id', 'country as country', 'flag as flag')->orderBy('country','asc')->get();
            return  response()->json(['status' => true, 'data' => $getcountry], 200);
        } else {
            return  response()->json(['status' => false, 'message' => 'No available country'], 200);
        }
    }


    public function profileupdate(Request $request)
    {
        try {
          $token = auth('sanctum')->user();
            if (!empty($token)){
			/*	if(!empty($request->username)){
				$user['username']=$request->username;	
				}
				if(!empty($request->email)){
				$user['email']=$request->email;	
				}
				if(!empty($request->background_image)){
				$user['background_image']=$request->background_image;	
				}
				if(!empty($request->profile_picture)){
				$user['profile_picture']=$request->profile_picture;	
				}
				if(!empty($request->firstname)){
				$user['firstname']=$request->firstname;	
				}
				if(!empty($request->lastname)){
				$user['lastname']=$request->lastname;	
				}
				if(!empty($request->firstname)){
				$user['firstname']=$request->firstname;	
				}
				if(!empty($request->birthday)){
				$user['birthday']=$request->birthday;	
				}
				if(!empty($request->country)){
				$user['country']=$request->country;	
				}
				if(!empty($request->mobile)){
				$user['mobile']=$request->mobile;	
				}if(!empty($request->fb_link)){
				$user['fb_link']=$request->fb_link;	
				}
				if(!empty($request->youtube_link)){
				$user['youtube_link']=$request->youtube_link;	
				}
				if(!empty($request->instagram_link)){
				$user['instagram_link']=$request->instagram_link;	
				}
				if(!empty($request->tiktok_link)){
				$user['tiktok_link']=$request->tiktok_link;	
				}
				if(!empty($request->pincode)){
				$user['pincode']=$request->pincode;	
				}
				if(!empty($request->city)){
				$user['city']=$request->city;	
				}
				if(!empty($request->school)){
				$user['school']=$request->school;	
				}
				if(!empty($request->interest)){
				$user['interest']=$request->interest;	
				}
				if(!empty($request->address)){
				$user['address']=$request->address;	
				}
				if(!empty($request->dob_visible)){
				$user['is_dob_disable']=$request->dob_visible;	
				}
				else{
					$user['is_dob_disable']=0;
				}
				if(!empty($request->bgc_verified)){
				$user['bgc_verified']=$request->bgc_verified;	
				}
				if(!empty($request->premium)){
				$user['premium']=$request->premium;	
				}
				if(!empty($request->story)){
				$user['story']=$request->story;	
				}
				if(!empty($request->interest)){
				$user['interest']=$request->interest;	
				}*/
				$user['username']=$request->username;
$user['email']=$request->email;	
$user['background_image']=$request->background_image;
$user['profile_picture']=$request->profile_picture;	
$user['firstname']=$request->firstname;
$user['lastname']=$request->lastname;
$user['firstname']=$request->firstname;	
$user['birthday']=$request->birthday;
$user['country']=$request->country;	
$user['mobile']=$request->mobile;
$user['fb_link']=$request->fb_link;
$user['youtube_link']=$request->youtube_link;
$user['instagram_link']=$request->instagram_link;
$user['tiktok_link']=$request->tiktok_link;	
$user['pincode']=$request->pincode;	
$user['city']=$request->city;	
$user['school']=$request->school;
$user['interest']=$request->interest;
$user['address']=$request->address;
$user['is_dob_disable']=$request->dob_visible;
$user['bgc_verified']=$request->bgc_verified;
$user['premium']=$request->premium;	
$user['story']=$request->story;	
$user['interest']=$request->interest;	
				
         /*   $user = array(
            	'background_image' => !empty($request->background_image)?$request->background_image:NULL,
                'profile_picture' => !empty($request->profile_picture)?$request->profile_picture:NULL,
                'firstname' => !empty($request->firstname)?$request->firstname:NULL,
                'lastname' => !empty($request->lastname)?$request->lastname:NULL,				
                'birthday' => !empty($request->birthday)?$request->birthday:NULL,
                'password' => Hash::make($request->password),
				'country' => !empty($request->country)?$request->country:NULL,
				'mobile' => !empty($request->mobile)?$request->mobile:NULL,
			    'username' => !empty($request->username)?$request->username:NULL,
                'fb_link' => !empty($request->fb_link)?$request->fb_link:NULL,
				'youtube_link' => !empty($request->youtube_link)?$request->youtube_link:NULL,
				'instagram_link' => !empty($request->instagram_link)?$request->instagram_link:NULL,
				'tiktok_link' => !empty($request->tiktok_link)?$request->tiktok_link:NULL,
                'pincode' => !empty($request->pincode)?$request->pincode:NULL,
				'city' => !empty($request->city)?$request->city:NULL,
				'school' => !empty($request->school)?$request->school:NULL,
				'interest' => !empty($request->interest)?$request->interest:NULL,
                'country' => !empty($request->country)?$request->country:NULL,
                'address' => !empty($request->address)?$request->address:NULL
				
                                  
            );*/
        

        
       
        $id = Usermodel::where('remember_token', $token->remember_token)->update($user);
        
            return  response()->json(['status' => true,  'message' => 'Profile data has been updated successfully!'], 200);
        } else {
            return  response()->json(['status' => false,  'message' => 'An error occurred, please try again later '], 200);
        }
          
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message'=>'Internal server error!',
                'error' => $th->getMessage()
            ], 500);
        }
    }

  public function save_background_image(Request $request)
    {
    	try{
           
    $token = auth('sanctum')->user();
	
	 $file = $request->file('background_image');
        $imageName = time().'.'.$file->extension();
        $imagePath = public_path(). '/background_image';

        $file->move($imagePath, $imageName);
       // $image_path = $request->file('background_image')->move('background_image', 'public');

      $url='http://lt-api.mynewsystem.net/background_image/'.$imageName;
	  $user['background_image']=$url;
	   $id = Usermodel::where('remember_token', $token->remember_token)->update($user);
      
            return  response()->json(['status' => true, 'url'=>$url,  'message' => 'Background picture Store'], 200);
       
          
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message'=>'Internal server error!'
                
            ], 500);
        }
    }


     public function save_profile_picture(Request $request)
    {
    	try{
     
       $token = auth('sanctum')->user();
	   
	    $file = $request->file('profile_picture');
        $imageName = time().'.'.$file->extension();
        $imagePath = public_path(). '/profile_picture';

        $file->move($imagePath, $imageName);
       // $image_path = $request->file('profile_picture')->move('profile_picture', 'public');

       
      $url='http://lt-api.mynewsystem.net/profile_picture/'.$imageName;
	   $user['profile_picture']=$url;
	   $id = Usermodel::where('remember_token', $token->remember_token)->update($user);
      
            return  response()->json(['status' => true,'url'=>$url,  'message' => 'Profile picture Store'], 200);
      
          
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message'=>'Internal server error!'
                
            ], 500);
        }
    }


    public function getuserlistfilter(Request $request)
    {
        if ( Usermodel::where('firstname','LIKE','%'.$request->src.'%')->orWhere('lastname','LIKE','%'.$request->src.'%')->orWhere('username','LIKE','%'.$request->src.'%')->count() > 0) {
        $matchingProfiles = Usermodel::where('firstname','LIKE','%'.$request->src.'%')->orWhere('lastname','LIKE','%'.$request->src.'%')->orWhere('username','LIKE','%'.$request->src.'%')->get();
$i=0;
$matchingProfiless=array();
foreach($matchingProfiles as $matchingProfiles){
	if(!empty($matchingProfiles['birthday']) && !empty($matchingProfiles['school']) && !empty($matchingProfiles['interest'])){
	$matchingProfiless[$i]=$matchingProfiles;
$matchingProfiless[$i]['interest']=array_map('intval',explode(',',substr($matchingProfiless[$i]['interest'],1,-1)));
$i++;
	}
}

        return  response()->json(['status' => true, 'data' => $matchingProfiless], 200);
        }
  else {
        return  response()->json(['status' => false, 'message' => 'No available data'], 200);
    }

    }

    public function getprofileid(Request $request)
    {
  
        if ( Usermodel::where('id', $request->id)->count() > 0) {
            $getprofile =  Usermodel::where('id', $request->id)->select('background_image as background_image','profile_picture as profile_picture', 'mobile as mobile','email as email', 'firstname as firstname', 'lastname as lastname','username as username', 'address as address', 'pincode as pincode', 'city as city', 'birthday as birthday', 'interest  as interest', 'country  as country', 'is_dob_disable  as dob_visible','bgc_verified as bgc_verified','story as story','premium as premium', 'fb_link  as fb_link', 'youtube_link  as youtube_link','instagram_link as instagram_link','tiktok_link as tiktok_link','password as password','registration_type as registration_type','school as school','status as status','remember_token as remember_token','email_verified_at as email_verified_at','create_user as create_user','update_user as update_user','is_first_login as is_first_login','created_at as created_at','updated_at as updated_at')->get();
       
            // return$getprofile[0];
$getprofile[0]['interest']=array_map('intval',explode(',',substr($getprofile[0]['interest'],1,-1)));
$getprofile[0]['mutual_friend'] = Usermodel::select('id as id', 'background_image as background_image','profile_picture as profile_picture', 'mobile as mobile','email as email', 'firstname as firstname', 'lastname as lastname','username as username', 'address as address', 'pincode as pincode', 'city as city', 'birthday as birthday', 'interest  as interest', 'country  as country', 'is_dob_disable  as dob_visible','bgc_verified as bgc_verified','story as story','premium as premium', 'fb_link  as fb_link', 'youtube_link  as youtube_link','instagram_link as instagram_link','tiktok_link as tiktok_link','password as password','registration_type as registration_type','school as school','status as status','remember_token as remember_token','email_verified_at as email_verified_at','create_user as create_user','update_user as update_user','is_first_login as is_first_login','created_at as created_at','updated_at as updated_at')->get();
if(empty($getprofile[0]['background_image']))
{
    $getprofile[0]['background_image']='http://lt-admin.mynewsystem.net/images/settings/84428.jpg';
}

if(empty($getprofile[0]['profile_picture']))
{
    $getprofile[0]['profile_picture']='http://lt-admin.mynewsystem.net/images/settings/84428.jpg';
}
$token = auth('sanctum')->user();
$getid =  Usermodel::where('remember_token', $token->remember_token)->first();
$fdrequest=Friendrequestmodel::where('friend_for_id', $request->id)->where('friend_id',$getid->id)->first();
if(!empty($fdrequest)){
$getprofile[0]['is_friend']=$fdrequest->friend_request_type;
}
else{
    $getprofile[0]['is_friend']=0;
}
$like=Likeprofilemodel::where('user_id',$getid->id)->where('profile_id',$request->id)->first();
if(!empty($like)){
	if($like->like_type==1){
	 $getprofile[0]['is_like']=true;
	}
	else{
		 $getprofile[0]['is_like']=false;
	}
	
}
//$getprofile[0]['Interest']=array_map('intval',explode(',',substr($getprofile[0]['Interest'],1,-1)));
		   return  response()->json(['status' => true, 'data' =>$getprofile], 200);
        } else {
            return  response()->json(['status' => false, 'message' => 'No available data'], 404);
        }
    }



    public function addnewsfeedlike(Request $request)
{


    try {
        //Validated
        $validateUser = Validator::make(
            $request->all(),
            [
               
                'news_feed_id' => 'required'
            ]
        );

        if ($validateUser->fails()) {

            return response()->json([
                'status' => false,
                'error' => 'validation error',
                'message' => $validateUser->errors()->first()
            ], 401);
        }

        $token = auth('sanctum')->user();
        $getid =  Usermodel::where('remember_token', $token->remember_token)->first();

if(Likemodel::where('user_id',$request->user_id)->where('news_feed_id',$request->news_feed_id)->count()>0){
    $user = Likemodel::create([
        'user_id' =>  $getid->id,
        'like_type' => 1,
        'news_feed_id' => !empty($request->news_feed_id)?$request->news_feed_id:NULL,
    
    ]);
	$is_like=true;
}
else{
    if(Likemodel::where('user_id',$request->user_id)->where('news_feed_id',$request->news_feed_id)->where('like_type',1)->count()>0){
        $user = Likemodel::where('user_id',$request->user_id)->where('news_feed_id',$request->news_feed_id)->update([
            'user_id' =>  $getid->id,
            'like_type' => 0,
            'news_feed_id' => !empty($request->news_feed_id)?$request->news_feed_id:NULL,
        
        ]);
		$is_like=false;
    }
    else{
        $user = Likemodel::where('user_id',$request->user_id)->where('news_feed_id',$request->news_feed_id)->update([
            'user_id' =>  $getid->id,
            'like_type' => 1,
            'news_feed_id' => !empty($request->news_feed_id)?$request->news_feed_id:NULL,
        
        ]);
		$is_like=true;
    }
   
}
       
      
        return response()->json([
            'status' => true,
			'is_like'=>$is_like,
            'message' => 'News Feed Like Successfully',
          
        ], 200);
    } catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
   
}


public function getnewsfeed(Request $request)
{
    try{
    $token = auth('sanctum')->user();
    $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
    $data=Newsfeedmodel::where('user_id',$getid->id)->get();
    return  response()->json(['status' => true, 'data' =>$data], 200);
} catch (\Throwable $th) {
    return response()->json([
        'status' => false,
        'message'=>'Internal server error!',
        'error' => $th->getMessage()
    ], 500);
}
}
public function getnewsfeedbyid(Request $request)
{
    try{
    $token = auth('sanctum')->user();
    $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
    $data=Newsfeedmodel::where('user_id',$getid->id)->where('id',$request->news_feed_id)->get();
    return  response()->json(['status' => true, 'data' =>$data], 200);
} catch (\Throwable $th) {
    return response()->json([
        'status' => false,
        'message'=>'Internal server error!',
        'error' => $th->getMessage()
    ], 500);
}
}



public function add_news_feed(Request $request)
{


    try {
         $token = auth('sanctum')->user();
         $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
       
        $url='';
   if(!empty($request->file('file'))){
        $file = $request->file('file');
        $imageName = time().'.'.$file->extension();
        $imagePath = public_path(). '/file';
        $url='http://lt-api.mynewsystem.net/file/'.$imageName;
        $file->move($imagePath, $imageName);
   }
  $user = Newsfeedmodel::create([
        'user_id'=>$getid->id,
        'news_type' => 0,
        'description' => !empty($request->description)?$request->description:NULL,
        'visible_type' => !empty($request->visible_type)?$request->visible_type:0,  
        'parent_id' => !empty($request->parent_id)?$request->parent_id:0,
        'file'=>$url
    
    ]);

  return response()->json([
            'status' => true,
            'message' => 'News Feed Created Successfully',
          
        ], 200);
    }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
   
}

public function add_friend_request(Request $request)
{
  try {

    //Validated
    $validateUser = Validator::make(
        $request->all(),
        [
            'friend_for_id' => 'required'
        ]
    );

    if ($validateUser->fails()) {

        return response()->json([
            'status' => false,
            'error' => 'validation error',
            'message' => $validateUser->errors()->first()
        ], 401);
    }


         $token = auth('sanctum')->user();
         $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
       
        $url='';
		$msg='';
		if($request->friend_request_type==1){
			$msg='Friend Request Successfully send';
			$type=6;
			$type1=1;
		}
		else if($request->friend_request_type==2){
			$msg='Friend Request Accepted';
			$type=2;
			$type1=2;
		}
		else if($request->friend_request_type==3){
			$msg='Friend Request Rejected';
			$type=0;
			$type1=0;
		}
		else if($request->friend_request_type==4){
			$msg='Friend Unfriend';
			$type=0;
			$type1=0;
		}
		else if($request->friend_request_type==5){
		$msg='Friend Request Cancel';
		$type=0;
			$type1=0;
		}
if(Friendrequestmodel::where('friend_id',$getid->id)->where('friend_for_id',$request->friend_for_id)->count()<=0){
  $user =Friendrequestmodel::create([
    //1 request send,2= friend accept,3=Reject,4=unfriend ,5=Cancel 
        'friend_request_type' => $type1,
        'friend_id' => $getid->id,
        'friend_for_id' => !empty($request->friend_for_id)?$request->friend_for_id:0,  
 ]);
 $user =Friendrequestmodel::create([
    //1/6 request send,2= friend accept,3/8=Reject,4/9=unfriend ,5/10=Cancel 
        'friend_request_type' => $type,
        'friend_id' => !empty($request->friend_for_id)?$request->friend_for_id:0,
        'friend_for_id' =>$getid->id,   
 ]);
 return response()->json([
            'status' => true,
			'friend_request_type'=>$request->friend_request_type,
            'message' => $msg,
          
        ], 200);
}
else{
  $user =Friendrequestmodel::where('friend_id',$getid->id)->where('friend_for_id',$request->friend_for_id)->update([
    //1 request send,2= friend accept,3=Reject,4=unfriend 
        'friend_request_type' => $type1
 ]); 
 $user =Friendrequestmodel::where('friend_id',$request->friend_for_id)->where('friend_for_id',$getid->id)->update([
    //1 request send,2= friend accept,3=Reject,4=unfriend 
        'friend_request_type' => $type
 ]); 
 return response()->json([
            'status' => true,
			'friend_request_type'=>$request->friend_request_type,
            'message' => $msg,
          
        ], 200);	
}
    }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
   
}


public function add_like_profile(Request $request)
{
  try {

     //Validated
     $validateUser = Validator::make(
        $request->all(),
        [
            'profile_id' => 'required'
        ]
    );

    if ($validateUser->fails()) {

        return response()->json([
            'status' => false,
            'error' => 'validation error',
            'message' => $validateUser->errors()->first()
        ], 401);
    }


         $token = auth('sanctum')->user();
         $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
       
        $url='';
if(Likeprofilemodel::where('user_id',$getid->id)->where('profile_id',$request->profile_id)->count()<=0){
  $user =Likeprofilemodel::create([
    'user_id'=>$getid->id,
    'profile_id' => !empty($request->profile_id)?$request->profile_id:0,  
    'like_type' => 1,  
 ]);  return response()->json([
            'status' => true,
			'is_like'=>true,
            'message' => 'Profile Successfully liked',
          
        ], 200);
}
else{
	$dt=Likeprofilemodel::where('user_id',$getid->id)->where('profile_id',$request->profile_id)->first();
	if($dt->like_type==1){
	  $user =Likeprofilemodel::where('user_id',$getid->id)->where('profile_id',$request->profile_id)->update([
        'like_type' => 0,  
 ]); 
 return response()->json([
            'status' => true,
			'is_like'=>false,
            'message' => 'Profile Successfully Unliked',
          
        ], 200);
	}
else{
	 $user =Likeprofilemodel::where('user_id',$getid->id)->where('profile_id',$request->profile_id)->update([
        'like_type' => 1,  
		]);
		return response()->json([
            'status' => true,
			'is_like'=>true,
            'message' => 'Profile Successfully liked',
          
        ], 200);
}	
}
    }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
   
}


public function add_profile_view(Request $request)
{
  try {

     //Validated
     $validateUser = Validator::make(
        $request->all(),
        [
            'profile_id' => 'required'
        ]
    );

    if ($validateUser->fails()) {

        return response()->json([
            'status' => false,
            'error' => 'validation error',
            'message' => $validateUser->errors()->first()
        ], 401);
    }


         $token = auth('sanctum')->user();
         $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
       
        $url='';
if(Profileview::where('user_id',$getid->id)->where('profile_id',$request->profile_id)->count()<=0){
  $user =Profileview::create([
    'user_id'=>$getid->id,
    'profile_id' => !empty($request->profile_id)?$request->profile_id:Null,  
       
        'like_type' => 1,  
 ]);  return response()->json([
            'status' => true,
			'is_view'=>true,
            'message' => 'Profile Successfully viewed',
          
        ], 200);
}
else{
return response()->json([
            'status' => true,
			'is_view'=>true,
            'message' => 'Profile Already viewed',
          
        ], 200);	
}
    }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
   
}
public function get_friend_list(Request $request)
{
	try{
	if(!empty($request->page)){
	if($request->page==1){
	$start=0;
	}
	else{
		$start=$request->page*20;
	}
	}
	else{
	$start=0;
	}
	$limit=20;
   $token = auth('sanctum')->user();
   $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
   $friend_list =Friendrequestmodel::join('user_managements','user_managements.id','=','friend_tbl.friend_for_id')->where('friend_tbl.friend_id', $getid->id)->where('friend_tbl.friend_request_type',2)->limit(20)->offset($start)->get(['user_managements.id as id','user_managements.background_image as background_image','user_managements.profile_picture as profile_picture', 'user_managements.mobile as mobile','user_managements.email as email', 'user_managements.firstname as firstname', 'user_managements.lastname as lastname','user_managements.username as username']);
return response()->json([
            'status' => true,
			'data'=>$friend_list
          
          
        ], 200);
 }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
}

public function meet_new_friend(Request $request)
{
	try{
	if(!empty($request->page)){
	if($request->page==1){
	$start=0;
	}
	else{
		$start=$request->page*12;
	}
	}
	else{
	$start=0;
	}
	$limit=12;
   $token = auth('sanctum')->user();
    $getid =  Usermodel::where('remember_token', $token->remember_token)->first();
 $arr=Friendrequestmodel::select('friend_for_id')->where('friend_id',$getid->id)->get();
  
   $friend_list =Usermodel::whereNotIn('id', $arr)->limit(20)->offset($start)->get(['user_managements.id as id','user_managements.background_image as background_image','user_managements.profile_picture as profile_picture', 'user_managements.mobile as mobile','user_managements.email as email', 'user_managements.firstname as firstname', 'user_managements.lastname as lastname','user_managements.username as username']);
return response()->json([
            'status' => true,
			'data'=>$friend_list
          
          
        ], 200);
 }
     catch (\Throwable $th) {
        return response()->json([
            'status' => false,
            'message'=>'Internal server error!',
            'error' => $th->getMessage()
        ], 500);
    }
}
}
?>